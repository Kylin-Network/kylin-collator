//! Autogenerated weights for kylin_oracle
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-28, STEPS: `100`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("pichiu-chachacha"), DB CACHE: 128

// Executed Command:
// target/release/kylin-collator
// benchmark
// --chain=pichiu-chachacha
// --steps=100
// --repeat=200
// --pallet=kylin-oracle
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=example_weights.rs
// --template=./scripts/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for kylin_oracle.
pub trait WeightInfo {
    fn submit_api() -> Weight;
    fn clear_api() -> Weight;
}

/// Weights for kylin_oracle using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn submit_api() -> Weight {
        Weight::from_ref_time(6_284_000)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    fn clear_api() -> Weight {
        Weight::from_ref_time(6_284_000)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }


}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn submit_api() -> Weight {
        Weight::from_ref_time(6_284_000)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    fn clear_api() -> Weight {
        Weight::from_ref_time(6_284_000)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
}
