// -*- mode: rust; -*-
//
// This file is part of schnorrkel.
// Copyright (c) 2019 Web 3 Foundation
// See LICENSE for licensing information.
//
// Authors:
// - Jeff Burdges <jeff@web3.foundation>

//! Encryption using schnorrkel keys


// use rand_core::{RngCore,CryptoRng};

use ::aead::{NewAead, generic_array::{GenericArray}};

use curve25519_dalek::digest::generic_array::typenum::{U32};

use curve25519_dalek::{
    ristretto::{CompressedRistretto}, // RistrettoPoint
    // scalar::Scalar,
};

use super::{SecretKey,PublicKey,Keypair,SignatureResult};
use crate::context::SigningTranscript;

use crate::cert::ECQVCertPublic;

/// Creates AEAD objects
///
/// Acts as a wrapper trait for `aead::NewAead` that permits naieve
/// usage without a HKDF because nowhere else do we use curve points
/// to directly seed an AEAD.  We recommend using the `MakeAEAD`
/// struct which provides an HKDF.
pub trait NewAead32 {
    /// Initalize an AEAD with a key exchange value 
    fn new32(kex: &[u8; 32]) -> Self;
}

impl<AEAD> NewAead32 for AEAD where AEAD: NewAead<KeySize=U32> {
    fn new32(kex: &[u8; 32]) -> Self {
        let mut key: GenericArray<u8, <AEAD as NewAead>::KeySize> = Default::default();
        key.clone_from_slice(kex);
        AEAD::new(key)
    }
}

/// Constructs an AEAD using an HKDF.
///
/// In principle, you should use prefer this over using some 
/// `aead::NewAead` directly, but nowhere else in schnorrkel
/// passes the `[u8; 32]` directly, so not necessarily required.
pub struct MakeAEAD { kex: [u8; 32] }

impl NewAead32 for MakeAEAD {
    fn new32(kex: &[u8; 32]) -> Self {
        MakeAEAD { kex: kex.clone() }
    }
}

impl MakeAEAD {
    /// Create an arbitrary AEAD using the transcript as an HKDF.
    pub fn commit<T: SigningTranscript>(&self, mut t: T, ctx: &'static [u8]) {
        t.commit_bytes(ctx, &self.kex)
    }

    /// Creates an arbitrary AEAD using merlin for as an HKDF.
    pub fn make_merlin<AEAD: NewAead>(&self, ctx: &'static [u8]) -> AEAD {
        let mut t = merlin::Transcript::new(b"KEX");
        t.append_message(b"ctx",ctx);
        self.commit(&mut t,b"kex");
        let mut key: GenericArray<u8, <AEAD as NewAead>::KeySize> = Default::default();
        t.challenge_bytes(b"",key.as_mut_slice());
        AEAD::new(key)
    }
}

impl SecretKey {
    /// Commit the results of a key exchange into a transcript
    #[inline(always)]
    pub(crate) fn raw_key_exchange(&self, public: &PublicKey) -> CompressedRistretto {
        (&self.key * public.as_point()).compress()
    }

    /// Commit the results of a key exchange into a transcript
    pub fn commit_key_exchange<T>(&self, t: &mut T, ctx: &'static [u8], public: &PublicKey) 
    where T: SigningTranscript
    {
        let p = self.raw_key_exchange(public);
        t.commit_point(ctx, &p);
    }

    /// An AEAD from a key exchange with the specified public key.
    pub fn aead_unauthenticated<AEAD: NewAead32>(&self, public: &PublicKey) -> AEAD {
        AEAD::new32( self.raw_key_exchange(public).as_bytes() )
    }

    /// Reciever's AEAD with ECQV certificate.
    ///
    /// Returns the AEAD constructed from an ephemeral key exchange
    /// with the public key computed form the sender's public key
    /// and their implicit ECQV certificate.
    pub fn reciever_aead_with_ecqv_cert<T,AEAD>(
        &self, 
        t: T, 
        cert_public: &ECQVCertPublic, 
        public: &PublicKey,
    ) -> SignatureResult<AEAD> 
    where T: SigningTranscript, AEAD: NewAead32
    {
        let epk = public.open_ecqv_cert(t,cert_public) ?;
        Ok(self.aead_unauthenticated(&epk))
    }
}

impl PublicKey {
    /// Initalize an AEAD from an ephemeral key exchange with the public key `self`.
    ///
    /// Returns the ephemeral public key and AEAD.
    pub fn init_aead_unauthenticated<AEAD: NewAead32>(&self) -> (CompressedRistretto,AEAD) 
    {
        let secret = SecretKey::generate();
        let aead = secret.aead_unauthenticated(self);
        (secret.to_public().into_compressed(), aead)
    }
}

impl Keypair {
    /// Sender's AEAD with ECQV certificate.
    ///
    /// Along with the AEAD, we return the implicit ECQV certificate
    /// from which the reciever recreates the ephemeral public key.
    pub fn sender_aead_with_ecqv_cert<T,AEAD>(&self, t: T, public: &PublicKey) -> (ECQVCertPublic,AEAD) 
    where T: SigningTranscript+Clone, AEAD: NewAead32
    {
        let (cert,secret) = self.issue_self_ecqv_cert(t);
        let aead = secret.aead_unauthenticated(&public);
        (cert, aead)
    }
}
